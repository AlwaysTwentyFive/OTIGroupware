<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.oti.groupware.mail.dao.ReceivedMailDAO">

	<resultMap id="receivedMailResultMap" type="receivedMail">
	    <result property="sendMailId" column="send_mail_id"/>
	    <result property="empIdEmployees" column="emp_id_employees"/>
	    <result property="recdMailImportanceYN" column="recd_mail_importance_yn"/>
	    <result property="recdMailDate" column="recd_mail_date"/>
	    <result property="recdMailReadReceiptYN" column="recd_mail_read_receipt_yn"/>
	    <result property="recdMailDelDate" column="recd_mail_del_date"/>
	    <result property="recdMailDelYN" column="recd_mail_del_yn"/>
	    <result property="recdMailDelCompleteYN" column="recd_mail_del_complete_yn"/>
	    <result property="parentSendMailId" column="PARENT_SEND_MAIL_ID"/>
	</resultMap>
	
	<select id="getMailTotalRow" parameterType="string" resultType="int">
		select count(send_mail_id)
		from received_mails
		where emp_id_employees = #{empId} and recd_mail_del_yn = 'N'
	</select>

	<select id="getReceivedMailById" resultMap="receivedMailResultMap">
		SELECT r.send_mail_id,
		    emp_id_employees,
		    recd_mail_importance_yn,
		    recd_mail_date,
		    recd_mail_read_receipt_yn,
		    recd_mail_del_date,
		    recd_mail_del_yn,
		    recd_mail_del_complete_yn
		FROM received_mails r , send_mails s 
		WHERE emp_id_employees = #{empId} and recd_mail_del_yn = 'N' and SEND_MAIL_TEMP_YN = 'N' and s.send_mail_id=r.send_mail_id 
		order by  recd_mail_date desc
		OFFSET (#{pager.pageNo} - 1) * #{pager.rowsPerPage} ROWS
		FETCH NEXT #{pager.rowsPerPage} ROWS ONLY
	</select>
	
	<select id="getReceivedEmpId" parameterType="int" resultType="string">
		select  emp_id_employees
		from received_mails
		where send_mail_id =#{sendMailId} 
	</select>
	
	<select id="readYN" parameterType="map" resultType="string">
		select recd_mail_read_receipt_yn
		from received_mails
		where send_mail_id =#{sendMailId} and emp_id_employees = #{empId}
	</select>
    
    <insert id="insertReceivedMail" parameterType="map">
        INSERT INTO received_mails (
        	send_mail_id, 
        	emp_id_employees, 
        	recd_mail_importance_yn,
            recd_mail_date, 
            recd_mail_read_receipt_yn, 
            recd_mail_del_date, 
            recd_mail_del_yn,
            recd_mail_del_complete_yn,
            PARENT_SEND_MAIL_ID)
        VALUES (
        	#{sendMailId}, 
        	#{empId}, 
        	default, 
        	default,
            default, 
            default, 
            default, 
            default,
            null)
    </insert>
    
    <select id="mailSearchRowsCount"  parameterType="map" resultType="int">
    	select count(send_mail_id)
		from received_mails
		where emp_id_employees = #{empId} and recd_mail_del_yn = 'N' 
		<if test='search.equals("read")'>
   			and recd_mail_read_receipt_yn = 'Y'
		</if>
		<if test='search.equals("notread")'>
   			and recd_mail_read_receipt_yn = 'N'
		</if>
		<if test='search.equals("import")'>
   			and recd_mail_importance_yn = 'Y'
		</if>
		<if test='search.equals("notimport")'>
   			and recd_mail_importance_yn = 'N'
		</if>
    </select>
    
     <select id="getSearchReceivedMailById" resultMap="receivedMailResultMap">
    	SELECT r.send_mail_id,
		    emp_id_employees,
		    recd_mail_importance_yn,
		    recd_mail_date,
		    recd_mail_read_receipt_yn,
		    recd_mail_del_date,
		    recd_mail_del_yn,
		    recd_mail_del_complete_yn
		from received_mails r, send_mails s
		where emp_id_employees = #{empId} and recd_mail_del_yn = 'N'and SEND_MAIL_TEMP_YN = 'N' and s.send_mail_id=r.send_mail_id 
		<if test='search.equals("read")'>
   			and recd_mail_read_receipt_yn = 'Y'
		</if>
		<if test='search.equals("notread")'>
   			and recd_mail_read_receipt_yn = 'N'
		</if>
		<if test='search.equals("import")'>
   			and recd_mail_importance_yn = 'Y'
		</if>
		<if test='search.equals("notimport")'>
   			and recd_mail_importance_yn = 'N'
		</if>
		order by  recd_mail_date desc
		OFFSET (#{pager.pageNo} - 1) * #{pager.rowsPerPage} ROWS
		FETCH NEXT #{pager.rowsPerPage} ROWS ONLY
    </select>
    
    <select id="getReceivedCount" parameterType="int" resultType="int">
    	SELECT count(send_mail_id)
		from received_mails
		where send_mail_id = ${sendMailId}
    </select>
    
    <select id="receivedMailGetImport" parameterType="map" resultType="string">
    	select RECD_MAIL_IMPORTANCE_YN
		from received_mails
		where SEND_MAIL_ID= #{mailId} and EMP_ID_EMPLOYEES = #{empId}
    </select>
    
    <update id="receivedMailChangeImport" parameterType="map">
    	update received_mails
    	set RECD_MAIL_IMPORTANCE_YN =
		<if test='star.equals("Y")'>
			'N'
		</if>
		<if test='star.equals("N")'>
			'Y'
		</if>
		where SEND_MAIL_ID= #{mailId} and EMP_ID_EMPLOYEES = #{empId}
    </update>
    
    <!-- 받은메일 휴지통 보내기 -->
    <update id="receivedMailSearchDelete">
    	update received_mails
		set RECD_MAIL_DEL_YN = 'Y' , RECD_MAIL_IMPORTANCE_YN='N', RECD_MAIL_DEL_DATE=sysdate
		where 
		<foreach collection="arr" item="mailId" separator="or">
		 	emp_id_employees=#{empId} and SEND_MAIL_ID=#{mailId}
		</foreach>
    </update>

    <update id="updateReceivedMail" parameterType="receivedMail">
        UPDATE received_mails
        SET recd_mail_importance_yn = #{recdMailImportanceYn}, recd_mail_date = #{recdMailDate},
            recd_mail_read_receipt_yn = #{recdMailReadReceiptYn}, recd_mail_del_date = #{recdMailDelDate},
            recd_mail_del_yn = #{recdMailDelYn}, recd_mail_del_complete_yn = #{recdMailDelCompleteYn},
            recd_sr = #{recdSr}
        WHERE send_mail_id = #{sendMailId} AND emp_id_employees = #{empIdEmployees}
    </update>

    <select id="getMailInformation" parameterType="int" resultMap="receivedMailResultMap">
    	SELECT send_mail_id,
		    emp_id_employees,
		    recd_mail_importance_yn,
		    recd_mail_date,
		    recd_mail_read_receipt_yn,
		    recd_mail_del_date,
		    recd_mail_del_yn,
		    recd_mail_del_complete_yn
		from received_mails
		where send_mail_id = #{sendMailId}
    </select>
    
     <update id="importReceivedMailChangeImport" parameterType="map">
    	update received_mails
    	set RECD_MAIL_IMPORTANCE_YN = 'N'
		where SEND_MAIL_ID= #{mailId} and EMP_ID_EMPLOYEES = #{empId}
    </update>
    
    <update id="updateTrashMail">
	    update received_mails
		set RECD_MAIL_DEL_COMPLETE_YN= 'Y' , RECD_MAIL_DEL_YN ='Y'
		where 
		<foreach collection="arr" item="mailId" separator="or">
		 	emp_id_employees=#{empId} and SEND_MAIL_ID=#{mailId}
		</foreach>
    </update>
    
    <update id="updateReceivedRestore">
    	 update received_mails
		set  RECD_MAIL_DEL_YN ='N'
		where
		<foreach collection="arr" item="mailId" separator="or">
		 	emp_id_employees=#{empId} and SEND_MAIL_ID=#{mailId}
		</foreach>
    </update>
    
    <update id="updateCompleteReceivedMail">
    	update received_mails
		set recd_MAIL_DEL_COMPLETE_YN ='Y'
		where 
		<foreach collection="receivedMail" item="receivedMail" separator="or">
		 	emp_id_employees = #{receivedMail.sendMailId} and send_mail_id = #{receivedMail.EmpIdEmployees}
		</foreach>
    </update>
    
    <select id="getAllReceivedMail" parameterType="int" resultType="int">
    	select count(send_mail_id)
    	from received_mails
    	where send_mail_id =#{mailId}
    </select>
    
    <select id="getCompleteReceivedMail" parameterType="int" resultType="int">
    	select count(send_mail_id)
    	from received_mails
    	where send_mail_id=#{mailId} and RECD_MAIL_DEL_COMPLETE_YN = 'Y'
    </select>
    
    <select id="getReceivedMailCount" parameterType="string" resultType="int">
    	 select count(SEND_MAIL_ID)
		 from received_mails
		 where EMP_ID_EMPLOYEES = #{empId}  and RECD_MAIL_DEL_YN='N'
    </select>
    
    <select id="getNotReadCount" parameterType="string" resultType="int">
    	 select count(SEND_MAIL_ID)
		 from received_mails
		 where EMP_ID_EMPLOYEES = #{empId}  and RECD_MAIL_DEL_YN='N' and RECD_MAIL_READ_RECEIPT_YN='Y'
    </select>
    
    <select id="getImportCount" parameterType="string" resultType="int">
    	 select count(SEND_MAIL_ID)
		 from received_mails
		 where EMP_ID_EMPLOYEES = #{empId}  and RECD_MAIL_DEL_YN='N' and RECD_MAIL_IMPORTANCE_YN='Y'
    </select>
    
    <select id="getTitleReceivedMail" resultMap="receivedMailResultMap">
    	SELECT send_mail_id,
		    emp_id_employees,
		    recd_mail_importance_yn,
		    recd_mail_date,
		    recd_mail_read_receipt_yn,
		    recd_mail_del_date,
		    recd_mail_del_yn,
		    recd_mail_del_complete_yn
		from received_mails
		where 
		<foreach collection="arr" item="mailId" separator="or">
		 	emp_id_employees = #{empId} and recd_mail_del_yn = 'N' and SEND_MAIL_ID=#{mailId}
		</foreach>
		order by  recd_mail_date desc
		OFFSET (#{pager.pageNo} - 1) * #{pager.rowsPerPage} ROWS
		FETCH NEXT #{pager.rowsPerPage} ROWS ONLY
    </select>
    
    <update id="changeReadYN" parameterType="map">
     update received_mails
     set recd_mail_read_receipt_yn ='Y'
     where send_mail_id = #{mailId} and EMP_ID_EMPLOYEES = #{empId}
    </update>
    
    <update id="updateTrash" parameterType="map">
    	update received_mails
    	set RECD_MAIL_DEL_YN = 'Y', RECD_MAIL_DEL_DATE =sysdate, RECD_MAIL_IMPORTANCE_YN ='N'
    	where send_mail_id = #{mailId} and EMP_ID_EMPLOYEES = #{empId}
    </update>    
    
     <update id="updateCompleteTrash" parameterType="map">
    	update received_mails
    	set RECD_MAIL_DEL_COMPLETE_YN = 'Y', RECD_MAIL_IMPORTANCE_YN ='N'
    	where send_mail_id = #{mailId} and EMP_ID_EMPLOYEES = #{empId}
    </update>    
    
    <select id="getDetailReceivedMail" parameterType="map" resultMap="receivedMailResultMap">
    	SELECT send_mail_id,
		    emp_id_employees,
		    recd_mail_importance_yn,
		    recd_mail_date,
		    recd_mail_read_receipt_yn,
		    recd_mail_del_date,
		    recd_mail_del_yn,
		    recd_mail_del_complete_yn,
		    parent_send_mail_id
		from received_mails
		where emp_id_employees = #{empId} and send_mail_id=#{mailId}
    </select>
    
    <update id="updateParentMail" parameterType="map" >
    	update received_mails
    	set  parent_send_mail_id = #{reply}
    	where send_mail_id=#{sendMailId}
    </update>
    
</mapper>