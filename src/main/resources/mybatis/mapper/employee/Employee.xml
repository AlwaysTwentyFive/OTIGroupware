<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.oti.groupware.employee.dao.EmployeeDAO">

	<resultMap id="employeeResultMap" type="employee">
		<result column="emp_id" property="empId"/>
		<result column="pos_id" property="posId"/>
		<result column="dep_id" property="depId"/>
		<result column="emp_mail" property="empMail"/>
		<result column="emp_name" property="empName"/>
		<result column="emp_password" property="empPassword"/>
		<result column="emp_extension_number" property="empExtensionNumber"/>
		<result column="emp_phone_number" property="empPhoneNumber"/>
		<result column="emp_leave_reserve" property="empLeaveReserve"/>
		<result column="emp_substitue_reserve" property="empSubstitueReserve"/>
		<result column="emp_login_failures_cnt" property="empLoginFailuresCnt"/>
		<result column="emp_file_data" property="empFileData"/>
		<result column="emp_file_type" property="empFileType"/>
		<result column="emp_file_name" property="empFileName"/>
	</resultMap>
	
	
	<select id="getEmployeeById" parameterType="map" resultMap="employeeResultMap">
		SELECT emp_id, pos_id, dep_id, emp_mail, emp_name, emp_password,
            emp_extension_number, emp_phone_number, emp_leave_reserve,
            emp_substitue_reserve, emp_login_failures_cnt, emp_file_data, emp_file_type, emp_file_name
        FROM employees
        WHERE emp_id = #{empId}
	</select>
	
	<update id="updateLoginFailCnt" parameterType="employee">
		update employees
		set emp_login_failures_cnt = #{empLoginFailuresCnt}
		where emp_id = #{empId}
	</update>
	
	<update id="updateLoginSuccessCnt" parameterType="employee">
		update employees
		set emp_login_failures_cnt = 0
		where emp_id = #{empId}
	</update>

    <select id="getPhoneNumber" resultType="string">
		select emp_phone_number
		from employees
	</select>
	
	<select id="getMailId" resultType="string">
		select emp_mail
		from employees
	</select>
	
	<select id="getEmpId" parameterType="map" resultType="string">
		select emp_id
		from employees
		where emp_id like #{completeId}
	</select>
	
    <insert id="insertEmployee" parameterType="employee">
        INSERT INTO employees (
            emp_id, pos_id, dep_id, emp_mail, emp_name, emp_password,
            emp_extension_number, emp_phone_number, emp_leave_reserve,
            emp_substitue_reserve, emp_login_failures_cnt, emp_file_data,
            emp_file_type,emp_file_name
        ) VALUES (
            #{empId}, #{posId}, #{depId}, #{empMail}, #{empName},
            #{empPassword}, #{empExtensionNumber}, #{empPhoneNumber},
            #{empLeaveReserve}, default,
            default, #{empFileData},
            #{empFileType}, #{empFileName}
        )
    </insert>
    
    <update id="updateImg" parameterType="employee" >
    	update employees
    	set emp_file_data=#{empFileData} , emp_file_type=  #{empFileType}, emp_file_name= #{empFileName}
    	where emp_id = #{empId}
    </update>
    
    <update id="updatePassword" parameterType="map">
    	update employees
    	set emp_password = #{password}
    	where emp_id = #{empId}
    </update>
    
    <select id="getDepartment" parameterType="int" resultMap="employeeResultMap">
    	select emp_id, emp_name, emp_mail
    	from employees
    	where dep_id = #{depId}
    	ORDER BY pos_id desc 
    </select>

	<select id="getEmployeeByName" parameterType="string" resultMap="employeeResultMap">
		SELECT emp_id, pos_id, dep_id, emp_mail, emp_name, emp_password,
            emp_extension_number, emp_phone_number, emp_leave_reserve,
            emp_substitue_reserve, emp_login_failures_cnt, emp_file_data, emp_file_type, emp_file_name
        FROM employees
        WHERE emp_name = #{empName}
	</select>
	
	<select id="getPositionIdById" parameterType="string" resultType="int">
		select pos_id
		from employees
		where emp_id = #{empId}
	</select>
	
	<select id="employeeRowsCount" resultType="int">
		select count(emp_id)
		from employees
	</select>
	
	<select id="getEmployees" resultMap="employeeResultMap">
		SELECT 
		    emp_id, emp_name, dep_id
		FROM employees
		ORDER BY pos_id DESC
		OFFSET (#{pager.pageNo} - 1) * #{pager.rowsPerPage} ROWS
		FETCH NEXT #{pager.rowsPerPage} ROWS ONLY
	</select>
	
	<select id="getCeoInformation" resultMap="employeeResultMap">
		SELECT emp_id, pos_id, dep_id, emp_mail, emp_name, emp_password,
            emp_extension_number, emp_phone_number, emp_leave_reserve,
            emp_substitue_reserve, emp_login_failures_cnt, emp_file_data, emp_file_type, emp_file_name
		FROM
		(SELECT e.emp_id, pos_id, dep_id, emp_mail, emp_name, emp_password,
            emp_extension_number, emp_phone_number, emp_leave_reserve,
            emp_substitue_reserve, emp_login_failures_cnt, emp_file_data, emp_file_type, emp_file_name
		FROM employees e, employees_detail d
		ORDER BY pos_id desc)
		WHERE ROWNUM= 1
	</select>
	
	<select id="getemp" resultMap="employeeResultMap">
		select emp_id, emp_name, emp_mail, pos_id, dep_id
		from employees
	</select>
	
	<select id="mailInfo" parameterType="string" resultType="employeeInfo">
		select pos_name as posName, dep_name as depName, emp_name as empName, e.emp_id as empId
		from positions p, departments d, employees e 
		where p.pos_id = 
		        (select pos_id
		        from employees
		        where emp_id=#{empId})
		    and d.dep_id =
		        (select dep_id
		        from employees
		        where emp_id=#{empId}) 
		    and e.emp_id =#{empId}
	</select>
	
</mapper>