<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.oti.groupware.mail.dao.SendMailDAO">

	<resultMap id="sendMailMap" type="sendMail">
		<id property="sendMailId" column="send_mail_id"/>
		<result property="empId" column="emp_id"/>
		<result property="sendMailTitle" column="send_mail_title"/>
		<result property="sendMailContent" column="send_mail_content"/>
		<result property="sendMailImportanceYN" column="send_mail_importance_yn"/>
		<result property="sendMailDate" column="send_mail_date"/>
		<result property="sendMailTempYN" column="send_mail_temp_yn"/>
		<result property="sendMailDelYN" column="send_mail_del_yn"/>
		<result property="sendMailDelCompleteYN" column="send_mail_del_complete_yn"/>
		<result property="tbName" column="tbName"/>
	</resultMap>
	
	<select id="getEmpIdById" parameterType="int" resultMap="sendMailMap">
		select emp_id, send_mail_title, send_mail_content
		from send_mails
		where send_mail_id =#{sendMailId}
	</select>
	
	<select id="getSendMailById" resultMap="sendMailMap" parameterType="int">
		SELECT send_mail_id, emp_id, send_mail_title, 
			send_mail_content, send_mail_importance_yn, 
			send_mail_date, send_mail_temp_yn, 
			send_mail_del_yn, send_mail_del_complete_yn 
		FROM send_mails
		WHERE send_mail_id = #{sendMailId}
	</select>
	
	<!-- 보내기전 임시보관함 삭제 -->
	<delete id="deleteMail" parameterType="int">
		delete from send_mails
		where send_mail_id = #{temp}
	</delete>
	
	<insert id="insertSendMail"  parameterType="sendMail">
		<selectKey keyProperty="sendMailId" resultType="int" order="BEFORE">
	    	select sendmail_seq.nextval FROM DUAL
	  	</selectKey>
        INSERT INTO send_mails (
            send_mail_id,
            emp_id,
            send_mail_title,
            send_mail_content,
            send_mail_importance_yn,
            send_mail_date,
            send_mail_temp_yn,
            send_mail_del_yn,
            send_mail_del_complete_yn,
            SEND_MAIL_DEL_DATE
        )
        VALUES (
            #{sendMailId},
             #{sendMail.empId},
            #{sendMail.sendMailTitle},
             <if test="write != null">
				#{write},
			</if>
			<if test="write == null">
				null,
			</if>
            default,
            default,
            default,
            default,
            default,
            null
        )
    </insert>
    
    <insert id="insertTempMail"  parameterType="sendMail">
		<selectKey keyProperty="sendMailId" resultType="int" order="BEFORE">
	    	select sendmail_seq.nextval FROM DUAL
	  	</selectKey>
        INSERT INTO send_mails (
            send_mail_id,
            emp_id,
            send_mail_title,
			send_mail_content,
            send_mail_importance_yn,
            send_mail_date,
            send_mail_temp_yn,
            send_mail_del_yn,
            send_mail_del_complete_yn,
            SEND_MAIL_DEL_DATE
        )
        VALUES (
            #{sendMailId},
            #{sendMail.empId},
            #{sendMail.sendMailTitle},
            <if test="write != null">
				#{write},
			</if>
			<if test="write == null">
				null,
			</if>
            default,
            default,
            'Y',
            default,
            default,
            null
        )
    </insert>
    
    <select id="getSEndMailId" resultType="int">
	     SELECT send_mail_id 
		FROM(
		    SELECT 
		        send_mail_id  
		    FROM send_mails
		    ORDER BY ROWNUM DESC)
		WHERE ROWNUM = 1
    </select>
    <select id="sendMailRowsCount" parameterType="string" resultType="int">
		select count(send_mail_id)
		from send_mails
		where emp_id = #{empId} and send_mail_del_yn = 'N' and send_mail_temp_yn ='N'
	</select>
	
	<select id="getSendMail" resultMap="sendMailMap">
		select send_mail_id
		from send_mails
		where emp_id = #{empId} and send_mail_del_yn = 'N' and send_mail_temp_yn ='N'
		order by  send_mail_date desc
		OFFSET (#{pager.pageNo} - 1) * #{pager.rowsPerPage} ROWS
		FETCH NEXT #{pager.rowsPerPage} ROWS ONLY
	</select>
	
	<!-- 보낸메일함 중요도 바꾸기 위해 현재의 import를 받아오기 -->
	<select id="sendMailGetImport" parameterType="int" resultType="string">
		select SEND_MAIL_IMPORTANCE_YN
		from send_mails
		where SEND_MAIL_ID=#{mailId}
	</select>
	
	<!-- 보낸메일함 중요도 바꾸기 -->
	<update id="sendMailChangeImport" parameterType="map">
		update send_mails
		set send_mail_importance_yn =
		<if test='star.equals("Y")'>
			'N'
		</if>
		<if test='star.equals("N")'>
			'Y'
		</if>
		where SEND_MAIL_ID=#{mailId}
	</update>
	
	<!-- 받은메일 휴지통 보내기 -->
	<update id="sendMailSearchDelete">
		update send_mails
		set SEND_MAIL_DEL_YN = 'Y', SEND_MAIL_IMPORTANCE_YN='N', SEND_MAIL_DEL_DATE = SYSDATE
		where 
		<foreach collection="arr" item="mailId" separator="or">
		 	SEND_MAIL_ID=#{mailId}
		</foreach>
	</update>
	
	<select id="mailSearchRowsCount"  parameterType="map" resultType="int">
    	select count(send_mail_id)
		from send_mails
		where emp_id = #{empId} and send_mail_del_yn = 'N' and send_mail_temp_yn ='N'
		<if test='search.equals("import")'>
   			and send_mail_importance_yn = 'Y'
		</if>
		<if test='search.equals("notimport")'>
   			and send_mail_importance_yn = 'N'
		</if>
	</select>
	
	
	<select id="getSearchSendMail" resultMap="sendMailMap">
		select send_mail_id
		from send_mails
		where emp_id = #{empId} and send_mail_del_yn = 'N' and send_mail_temp_yn ='N'
		<if test='search.equals("import")'>
   			and send_mail_importance_yn = 'Y'
		</if>
		<if test='search.equals("notimport")'>
   			and send_mail_importance_yn = 'N'
		</if>
		order by  send_mail_date desc
		OFFSET (#{pager.pageNo} - 1) * #{pager.rowsPerPage} ROWS
		FETCH NEXT #{pager.rowsPerPage} ROWS ONLY
	</select>
	
	<select id="getImportRowCount" parameterType="string" resultType="int">
		select count(send_mail_id)
	    from(select send_mail_id
		    from(select send_mail_id
			    from send_mails
			    where send_mail_importance_YN = 'Y' and send_mail_del_yn='N' and emp_id=#{empId}
			    order by send_mail_date desc)
		    union
		    select send_mail_id
		    from(select send_mail_id
			    from received_mails
			    where recd_mail_importance_yn = 'Y' and recd_mail_del_yn = 'N' and emp_id_employees=#{empId}
			    order by recd_mail_date desc))
	</select>
		
	<select id="getImportMail" parameterType="map" resultMap="sendMailMap">
		select send_mail_id, tbName
		from(select send_mail_id, 'send' as tbName
		    from(select send_mail_id
			    from send_mails
			    where send_mail_importance_YN = 'Y' and send_mail_del_yn='N' and emp_id=#{empId}
			    order by send_mail_date desc)
		    union
		    select send_mail_id, 'received' as tbName
		    from(select send_mail_id
			    from received_mails
			    where recd_mail_importance_yn = 'Y' and recd_mail_del_yn = 'N' and emp_id_employees=#{empId}
			    order by recd_mail_date desc))
		order by send_mail_id desc
		OFFSET (#{pager.pageNo} - 1) * #{pager.rowsPerPage} ROWS
		FETCH NEXT #{pager.rowsPerPage} ROWS ONLY
	</select>
	
	<select id="getMailInformation" parameterType="int" resultMap="sendMailMap">
		select send_mail_id, emp_id, send_mail_title, 
			send_mail_content,
			send_mail_date,
			send_mail_importance_yn
		from send_mails
		where send_mail_id = #{sendMailId}
	</select>
	
	<select id="getWhereTable" parameterType="map" resultType="string">
		select 'send' as tbName
	    from send_mails
	    where emp_id = #{empId} and send_mail_id = #{mailId}
	    union
	    select 'received' as tbName
	    from received_mails
       	where EMP_ID_EMPLOYEES =#{empId} and send_mail_id = #{mailId}
	</select>
	
	<update id="importMailChangeImport" parameterType="int">
		update send_mails
		set send_mail_importance_yn = 'N'
		where SEND_MAIL_ID=#{mailId}
	</update>
	
	<select id="tempMailRowsCount" parameterType="string" resultType="int">
		select count(SEND_MAIL_ID)
		from send_mails
		where EMP_ID =#{empId} and SEND_MAIL_TEMP_YN = 'Y'
	</select>

	<select id="getTempMail" parameterType="map" resultMap="sendMailMap">
		select send_mail_id
		from send_mails
		where emp_id = #{empId} and send_mail_del_yn = 'N' and send_mail_temp_yn ='Y'
		order by  send_mail_date desc
		OFFSET (#{pager.pageNo} - 1) * #{pager.rowsPerPage} ROWS
		FETCH NEXT #{pager.rowsPerPage} ROWS ONLY
	</select>
	
	<delete id="deleteTempMail">
		delete from send_mails
		where 
		<foreach collection="arr" item="mailId" separator="or">
		 	SEND_MAIL_ID=#{mailId}
		</foreach>
	</delete>
	
	<select id="getTrashRowCount" parameterType="string" resultType="int">
		select count(send_mail_id)
	    from(select send_mail_id
		    from(select send_mail_id
			    from send_mails
			    where SEND_MAIL_DEL_YN='Y' and SEND_MAIL_DEL_COMPLETE_YN ='N' and emp_id=#{empId}
			    order by send_mail_date desc)
		    union
		    select send_mail_id
		    from(select send_mail_id
			    from received_mails
			    where recd_mail_del_yn = 'Y' and RECD_MAIL_DEL_COMPLETE_YN ='N' and emp_id_employees=#{empId}
			    order by recd_mail_date desc))
	</select>
	
	<!-- 휴지통 얻어오기 -->
	<select id="getTrashMail" parameterType="map" resultMap ="sendMailMap">
		select send_mail_id, tbName
		from(select send_mail_id, 'send' as tbName
		    from(select send_mail_id
			    from send_mails
			    where SEND_MAIL_DEL_YN='Y' and SEND_MAIL_DEL_COMPLETE_YN ='N' and emp_id=#{empId}
			    order by send_mail_date desc)
		    union
		    select send_mail_id, 'received' as tbName
		    from(select send_mail_id
			    from received_mails
			    where recd_mail_del_yn = 'Y' and RECD_MAIL_DEL_COMPLETE_YN ='N' and emp_id_employees=#{empId}
			    order by recd_mail_date desc))
		order by send_mail_id desc
		OFFSET (#{pager.pageNo} - 1) * #{pager.rowsPerPage} ROWS
		FETCH NEXT #{pager.rowsPerPage} ROWS ONLY
	</select>
	
	<!-- 휴지통 완전삭제 -->
	<update id="updateTrashMail">
		update send_mails
		set SEND_MAIL_DEL_COMPLETE_YN ='Y' ,SEND_MAIL_DEL_YN ='Y'
		where 
		<foreach collection="arr" item="mailId" separator="or">
		 	SEND_MAIL_ID=#{mailId}
		</foreach>
	</update>
	
	<!-- 휴지통 복귀 -->
	<update id="updateSendRestore">
		update send_mails
		set SEND_MAIL_DEL_YN ='N'
		where 
		<foreach collection="arr" item="mailId" separator="or">
		 	SEND_MAIL_ID=#{mailId}
		</foreach>
	</update>
	
	<select id="getDeleteTrashMail" resultMap="sendMailMap">
		<![CDATA[
		select SEND_MAIL_ID, emp_id, 'send' as tbName 
        from send_mails
        where 30  <= (TRUNC(SYSDATE) - TRUNC(SEND_MAIL_DEL_DATE)) and send_MAIL_DEL_YN ='Y' and SEND_MAIL_DEL_COMPLETE_YN ='N'
        union all
        select send_mail_id, emp_id_employees, 'received' as tbName 
        from received_mails
        where 30  <= (TRUNC(SYSDATE) - TRUNC(RECD_MAIL_DEL_DATE)) and RECD_MAIL_DEL_YN ='Y' and RECD_MAIL_DEL_COMPLETE_YN ='N'
        ]]>
	</select>
	
	<update id="updateCompleteSendMail">
		update send_mails
		set SEND_MAIL_DEL_COMPLETE_YN ='Y'
		where 
		<foreach collection="arr" item="sendMail" separator="or">
		 	SEND_MAIL_ID=#{mailId} 
		</foreach>
	</update>
	
	<select id="getCompleteMail" resultType="int">
		select SEND_MAIL_ID
		from send_mails
		where SEND_MAIL_DEL_COMPLETE_YN ='Y'
	</select>
	
	<delete id="deleteSendMail" parameterType="int">
		DELETE FROM send_mails WHERE send_mail_id = #{mailId}
	</delete>
	
	<select id="getTempCount" parameterType="string" resultType="int">
	 	 select count(SEND_MAIL_ID)
		 from send_mails 
		 where emp_id=#{empId} and SEND_MAIL_TEMP_YN = 'Y'
	</select>
	
	<select id="getTitleCount" parameterType="map" resultType="int">
    	SELECT send_mail_id
		from send_mails
		where SEND_MAIL_TITLE = ${title}
    </select>
    
    <select id="getTitleSendMail" resultMap="sendMailMap">
		select send_mail_id, emp_id, send_mail_title, 
			send_mail_content, send_mail_importance_yn, 
			send_mail_date, send_mail_temp_yn, 
			send_mail_del_yn, send_mail_del_complete_yn 
		from send_mails
		where emp_id = #{empId} and send_mail_del_yn = 'N' and send_mail_temp_yn ='N' and
		<foreach collection="arr" item="mailId" separator="or">
		 	SEND_MAIL_ID=#{mailId}
		</foreach>
		order by  send_mail_date desc
		OFFSET (#{pager.pageNo} - 1) * #{pager.rowsPerPage} ROWS
		FETCH NEXT #{pager.rowsPerPage} ROWS ONLY
	</select>
	
	 <select id="getTitleTempMail" resultMap="sendMailMap">
		select send_mail_id, emp_id, send_mail_title, 
			send_mail_content, send_mail_importance_yn, 
			send_mail_date, send_mail_temp_yn, 
			send_mail_del_yn, send_mail_del_complete_yn 
		from send_mails
		where emp_id = #{empId} and send_mail_del_yn = 'N' and send_mail_temp_yn ='Y' and
		<foreach collection="arr" item="mailId" separator="or">
		 	SEND_MAIL_ID=#{mailId}
		</foreach>
		order by  send_mail_date desc
		OFFSET (#{pager.pageNo} - 1) * #{pager.rowsPerPage} ROWS
		FETCH NEXT #{pager.rowsPerPage} ROWS ONLY
	</select>
	
	 <select id="getTitleImportMail" resultMap="sendMailMap">
	 select send_mail_id, 'send' as tbName
	    from(select send_mail_id
		    from send_mails
		    where send_mail_importance_YN = 'Y' and send_mail_del_yn='N' and emp_id=#{empId} and
		    <foreach collection="arr" item="mailId" separator="or">
		 		SEND_MAIL_ID=#{mailId}
			</foreach>
		    order by send_mail_date desc)
	    union
	    select send_mail_id, 'received' as tbName
	    from(select send_mail_id
		    from received_mails
		    where recd_mail_importance_yn = 'Y' and recd_mail_del_yn = 'N' and emp_id_employees=#{empId} and
		    <foreach collection="arr" item="mailId" separator="or">
		 		SEND_MAIL_ID=#{mailId}
			</foreach>
		    order by recd_mail_date desc)
		OFFSET (#{pager.pageNo} - 1) * #{pager.rowsPerPage} ROWS
		FETCH NEXT #{pager.rowsPerPage} ROWS ONLY
	</select>
	 <select id="getTitleTrashMail" resultMap="sendMailMap">
		select send_mail_id, 'send' as tbName
	    from(select send_mail_id
		    from send_mails
		    where SEND_MAIL_DEL_YN='Y' and SEND_MAIL_DEL_COMPLETE_YN ='N' and emp_id=#{empId} and
		    <foreach collection="arr" item="mailId" separator="or">
		 		SEND_MAIL_ID=#{mailId}
			</foreach>
		    order by send_mail_date desc)
	    union
	    select send_mail_id, 'received' as tbName
	    from(select send_mail_id
		    from received_mails
		    where recd_mail_del_yn = 'Y' and RECD_MAIL_DEL_COMPLETE_YN ='N' and emp_id_employees=#{empId} and
		    <foreach collection="arr" item="mailId" separator="or">
		 		SEND_MAIL_ID=#{mailId}
			</foreach>
		    order by recd_mail_date desc)
		OFFSET (#{pager.pageNo} - 1) * #{pager.rowsPerPage} ROWS
		FETCH NEXT #{pager.rowsPerPage} ROWS ONLY
	</select>
	
	<update id="updateTrash" parameterType="int">
		update send_mails
		set SEND_MAIL_DEL_YN = 'Y' ,SEND_MAIL_DEL_DATE = sysdate, SEND_MAIL_IMPORTANCE_YN='N'
		where send_mail_id = #{mailId}
	</update>
	
	<update id="updateCompleteTrash" parameterType="int">
		update send_mails
		set SEND_MAIL_DEL_COMPLETE_YN = 'Y' ,SEND_MAIL_IMPORTANCE_YN='N'
		where send_mail_id = #{mailId}
	</update>
	
	<select id="getParentMail" parameterType="int" resultType="receivedMail">
		select send_mail_title as parentSendMailTitle, send_mail_content as parentSendMailContent, emp_id as empId
		from send_mails
		where send_mail_id = #{parentId}
	</select>
	
</mapper>