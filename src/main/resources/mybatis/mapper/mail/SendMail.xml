<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.oti.groupware.mail.dao.SendMailDAO">

	<resultMap id="sendMailMap" type="sendMail">
		<id property="sendMailId" column="send_mail_id"/>
		<result property="empId" column="emp_id"/>
		<result property="sendMailTitle" column="send_mail_title"/>
		<result property="sendMailContent" column="send_mail_content"/>
		<result property="sendMailImportanceYN" column="send_mail_importance_yn"/>
		<result property="sendMailDate" column="send_mail_date"/>
		<result property="sendMailTempYN" column="send_mail_temp_yn"/>
		<result property="sendMailDelYN" column="send_mail_del_yn"/>
		<result property="sendMailDelCompleteYN" column="send_mail_del_complete_yn"/>
	</resultMap>
	
	<select id="getEmpIdById" parameterType="int" resultType="string">
		select emp_id
		from send_mails
		where send_mail_id =#{sendMailId}
	</select>
	
	<select id="getTitleById" parameterType="int" resultType="string">
		select send_mail_title
		from send_mails
		where send_mail_id=#{sendMailId}
	</select>

	<select id="getSendMailById" resultMap="sendMailMap" parameterType="int">
		SELECT send_mail_id, emp_id, send_mail_title, 
			send_mail_content, send_mail_importance_yn, 
			send_mail_date, send_mail_temp_yn, 
			send_mail_del_yn, send_mail_del_complete_yn 
		FROM send_mails
		WHERE send_mail_id = #{sendMailId}
	</select>
	
	<insert id="insertSendMail"  parameterType="SendMail">
		<selectKey keyProperty="sendMailId" resultType="int" order="BEFORE">
	    	select sendmail_seq.nextval from dual
	  	</selectKey>
	  	
        INSERT INTO send_mails (
            send_mail_id,
            emp_id,
            send_mail_title,
            send_mail_content,
            send_mail_importance_yn,
            send_mail_date,
            send_mail_temp_yn,
            send_mail_del_yn,
            send_mail_del_complete_yn
        )
        VALUES (
            #{sendMailId},
            #{empId},
            #{sendMailTitle},
            #{sendMailContent},
            default,
            default,
            default,
            default,
            default
        )
    </insert>
    
    <insert id="insertTempMail"  parameterType="SendMail">
		<selectKey keyProperty="sendMailId" resultType="int" order="BEFORE">
	    	select sendmail_seq.nextval from dual
	  	</selectKey>
        INSERT INTO send_mails (
            send_mail_id,
            emp_id,
            send_mail_title,
            send_mail_content,
            send_mail_importance_yn,
            send_mail_date,
            send_mail_temp_yn,
            send_mail_del_yn,
            send_mail_del_complete_yn
        )
        VALUES (
            #{sendMailId},
            #{empId},
            #{sendMailTitle},
            #{sendMailContent},
            default,
            default,
            'Y',
            default,
            default
        )
    </insert>
    
    <select id="sendMailRowsCount" parameterType="string" resultType="int">
		select count(send_mail_id)
		from send_mails
		where emp_id = #{empId} and send_mail_del_yn = 'N' and send_mail_temp_yn ='N'
	</select>
	
	<select id="getSendMail" resultMap="sendMailMap">
		select send_mail_id, emp_id, send_mail_title, 
			send_mail_content, send_mail_importance_yn, 
			send_mail_date, send_mail_temp_yn, 
			send_mail_del_yn, send_mail_del_complete_yn 
		from send_mails
		where emp_id = #{empId} and send_mail_del_yn = 'N' and send_mail_temp_yn ='N'
		order by  send_mail_date desc
		OFFSET (#{pager.pageNo} - 1) * #{pager.rowsPerPage} ROWS
		FETCH NEXT #{pager.rowsPerPage} ROWS ONLY
	</select>
	
	<select id="sendMamilGetImport" parameterType="int" resultType="string">
		select SEND_MAIL_IMPORTANCE_YN
		from send_mails
		where SEND_MAIL_ID=#{mailId}
	</select>
	
	<update id="sendMamilChangeImport" parameterType="map">
		update send_mails
		set send_mail_importance_yn =
		<if test='star.equals("Y")'>
			'N'
		</if>
		<if test='star.equals("N")'>
			'Y'
		</if>
		where SEND_MAIL_ID=#{mailId}
	</update>
	
	<select id="mailSearchRowsCount"  parameterType="map" resultType="int">
    	select count(send_mail_id)
		from send_mails
		where emp_id = #{empId} and send_mail_del_yn = 'N' and send_mail_temp_yn ='N'
		<if test='search.equals("import")'>
   			and send_mail_importance_yn = 'Y'
		</if>
		<if test='search.equals("notimport")'>
   			and send_mail_importance_yn = 'N'
		</if>
	</select>
	
	
	<select id="getSearchSendMail" resultMap="sendMailMap">
		select send_mail_id, emp_id, send_mail_title, 
			send_mail_content, send_mail_importance_yn, 
			send_mail_date, send_mail_temp_yn, 
			send_mail_del_yn, send_mail_del_complete_yn 
		from send_mails
		where emp_id = #{empId} and send_mail_del_yn = 'N' and send_mail_temp_yn ='N'
		<if test='search.equals("import")'>
   			and send_mail_importance_yn = 'Y'
		</if>
		<if test='search.equals("notimport")'>
   			and send_mail_importance_yn = 'N'
		</if>
		order by  send_mail_date desc
		OFFSET (#{pager.pageNo} - 1) * #{pager.rowsPerPage} ROWS
		FETCH NEXT #{pager.rowsPerPage} ROWS ONLY
	</select>
	
    <update id="updateSendMail" parameterType="SendMail">
        UPDATE send_mails SET
            emp_id = #{empId},
            send_mail_title = #{sendMailTitle},
            send_mail_content = #{sendMailContent},
            send_mail_importance_yn = #{sendMailImportanceYn},
            send_mail_date = #{sendMailDate},
            send_mail_temp_yn = #{sendMailTempYn},
            send_mail_del_yn = #{sendMailDelYn},
            send_mail_del_complete_yn = #{sendMailDelCompleteYn} 
        WHERE
            send_mail_id = #{sendMailId}
    </update>
	
	<delete id="deleteSendMail" parameterType="int">
		DELETE FROM send_mails WHERE send_mail_id = #{sendMailId}
	</delete>

</mapper>