<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.oti.groupware.hr.dao.LeaveApplicationDAO">

    <resultMap id="leaveApplicationResultMap" type="leaveApplication">
        <result column="lev_app_id" property="levAppId"/>
        <result column="emp_id" property="empId"/>
        <result column="emp_name" property="empName"/>
        <result column="lev_app_date" property="levAppDate"/>
        <result column="lev_app_reason" property="levAppReason"/>
        <result column="lev_app_category" property="levAppCategory"/>
        <result column="lev_app_start_date" property="levAppStartDate"/>
        <result column="lev_app_end_date" property="levAppEndDate"/>
        <result column="lev_period" property="levPeriod"/>
        <result column="lev_app_process_state" property="levAppProcessState"/>
        <result column="lev_app_process_date" property="levAppProcessDate"/>
        <result column="lev_app_approval_emp_name" property="levAppApprovalEmpName"/>
        <result column="lev_app_approval_emp_id" property="levAppApprovalEmpId"/>
        <result column="lev_app_opinion" property="levAppOpinion"/>
        <result column="lev_app_cancel" property="levAppCancel"/>
    </resultMap>
    
    <!-- 휴가신청서(일반 임직원) - 전체 행의 수 -->
	<select id="getLeaveApplicationRowsCount" resultType="int">
	    SELECT 
	      count(*)
	    FROM 
	      leave_applications
	    <where>
	      emp_id = #{empId}
	      <if test="(startDate != null and !startDate.equals('')) and (endDate != null and !endDate.equals(''))">
	      	AND lev_app_date BETWEEN TO_DATE(#{startDate, jdbcType=VARCHAR}, 'YYYY-MM') AND TO_DATE(#{endDate, jdbcType=VARCHAR}, 'YYYY-MM')
	      </if>
	    </where>
	</select>

    <!-- 휴가신청서(일반 임직원) - 페이징 목록 -->
	<select id="getLeaveApplicationList" resultMap="leaveApplicationResultMap">
		SELECT 
		    lev_app_id,
		    lev_app_date,
		    lev_app_category,
		    lev_app_start_date,
		    lev_app_end_date,
		    lev_app_approval_emp_name,
		    lev_app_process_state,
		    lev_app_cancel
		FROM leave_applications
		<where>
	      emp_id = #{empId}
	      <if test="(startDate != null and !startDate.equals('')) and (endDate != null and !endDate.equals(''))">
	      	AND lev_app_date BETWEEN TO_DATE(#{startDate, jdbcType=VARCHAR}, 'YYYY-MM') AND TO_DATE(#{endDate, jdbcType=VARCHAR}, 'YYYY-MM')
	      </if>
		</where>
		ORDER BY lev_app_date DESC
		OFFSET (#{pager.pageNo} - 1) * #{pager.rowsPerPage} ROWS
		FETCH NEXT #{pager.rowsPerPage} ROWS ONLY
	</select>

	<!-- 휴가신청서(일반 임직원) - 상세조회 -->
	<select id="getLeaveApplicationDetail" resultMap="leaveApplicationResultMap">
		SELECT 
		    emp_id,
		    lev_app_date,
		    lev_app_reason,
		    lev_app_category,
		    lev_app_start_date,
		    lev_app_end_date,
		    lev_app_approval_emp_id,
		    lev_app_approval_emp_name,
		    lev_app_process_state,
		    lev_app_opinion,
		    lev_app_cancel
		FROM 
			leave_applications
		WHERE
            lev_app_id = #{levAppId}
	</select>
	
	<!-- 휴가신청 통계 -->
	<select id="getLeaveApplicationStats" resultType="hashmap">
		SELECT DISTINCT
		   (
		    SELECT 
		    ROUND(sum(CASE WHEN lev_app_category IN ('연차', '대체휴무') THEN 1 
		                    WHEN lev_app_category IN ('오전반차', '오후반차') THEN 0.5 END), 2) AS 사용휴가
		    FROM leave_applications
		    WHERE emp_id = #{empId}
		        AND lev_app_process_state = '승인' AND lev_app_cancel is null
		   ) AS 사용휴가,
		   e.emp_leave_reserve AS 잔여연차,
		   e.emp_substitue_reserve AS 잔여대체휴무
		FROM 
		   leave_applications la, employees e
		WHERE 
		   e.emp_id = #{empId}
	</select>
	
	<!-- 휴가신청서 등록 -->
    <insert id="insertLeaveApplication" parameterType="leaveApplication">
        INSERT INTO leave_applications (
        	lev_app_id, 
        	emp_id, 
        	lev_app_date, 
        	lev_app_reason, 
        	lev_app_category,
        	lev_app_start_date, 
        	lev_app_end_date, 
        	lev_app_process_state, 
        	lev_app_approval_emp_id,
        	lev_app_approval_emp_name
        	<if test="levAppCancel == '휴가취소'">, lev_app_cancel</if>
       	)
        VALUES (
        	SEQ_LEV_APP_ID.NEXTVAL, 
        	#{empId}, 
        	SYSDATE, 
        	#{levAppReason}, 
        	#{levAppCategory}, 
        	#{levAppStartDate},
        	#{levAppEndDate}, 
        	'미처리', 
        	#{levAppApprovalEmpId},
        	#{levAppApprovalEmpName}
        	<if test="levAppCancel == '휴가취소'">, '휴가취소'</if>
       	)
    </insert>
    
    <!-- 휴가결재(부서장) 통계 -->
    <select id="getLeaveApplicationApprovalStats" resultType="hashmap">
		SELECT
		    count(CASE WHEN lev_app_process_state = '미처리' THEN 1 END) AS 미처리,
		    count(CASE WHEN lev_app_process_state = '승인' THEN 1 END) AS 승인,
            count(CASE WHEN lev_app_process_state = '반려' THEN 1 END) AS 반려
		FROM 
		    leave_applications
		WHERE
		    lev_app_approval_emp_id = #{empId}
	</select>
    
    <!-- 휴가신청결재서(부서장) - 전체 행의 수 -->
	<select id="getLeaveApplicationApprovalRowsCount" resultType="int">
	    SELECT 
	      count(*)
	    FROM 
	      leave_applications
	    <where>
	      lev_app_approval_emp_id = #{empId}
	      <if test="(startDate != null and !startDate.equals('')) and (endDate != null and !endDate.equals(''))">
	      	AND lev_app_date BETWEEN TO_DATE(#{startDate, jdbcType=VARCHAR}, 'YYYY-MM') AND TO_DATE(#{endDate, jdbcType=VARCHAR}, 'YYYY-MM')
	      </if>
	    </where>
	</select>

    <!-- 휴가신청결재서(부서장) - 페이징 목록 -->
	<select id="getLeaveApplicationApprovalList" resultMap="leaveApplicationResultMap">
		SELECT 
		    lev_app_id,
		    lev_app_date,
		    lev_app_category,
		    lev_app_start_date,
		    lev_app_end_date,
		    lev_app_approval_emp_name,
		    lev_app_process_state,
		    lev_app_cancel
		FROM leave_applications
		<where>
	      lev_app_approval_emp_id = #{empId}
	      <if test="(startDate != null and !startDate.equals('')) and (endDate != null and !endDate.equals(''))">
	      	AND lev_app_date BETWEEN TO_DATE(#{startDate, jdbcType=VARCHAR}, 'YYYY-MM') AND TO_DATE(#{endDate, jdbcType=VARCHAR}, 'YYYY-MM')
	      </if>
		</where>
		ORDER BY lev_app_date DESC
		OFFSET (#{pager.pageNo} - 1) * #{pager.rowsPerPage} ROWS
		FETCH NEXT #{pager.rowsPerPage} ROWS ONLY
	</select>
	
	<!-- 휴가신청결재서(부서장) - 상세조회 -->
	<select id="getLeaveApplicationApprovalDetail" resultMap="leaveApplicationResultMap">
		SELECT 
            (SELECT e.emp_name FROM employees e, leave_applications la WHERE e.emp_id = la.emp_id AND la.lev_app_id = #{levAppId}) AS emp_name,
		    emp_id,
		    lev_app_id,
		    lev_app_date,
		    lev_app_reason,
		    lev_app_category,
		    lev_app_start_date,
		    lev_app_end_date,
		    (lev_app_end_date - lev_app_start_date)+1 AS lev_period,
		    lev_app_approval_emp_id,
		    lev_app_approval_emp_name,
		    lev_app_process_state,
		    lev_app_opinion,
		    lev_app_cancel
		FROM 
			leave_applications
		WHERE
            lev_app_id = #{levAppId}
	</select>
	
    <!-- 잔여일수 가져오기 -->
    <!-- 나중에 EmployeeMapper에 옮기기 -->
	<select id="getEmpReserveInfo" resultType="employee">
		SELECT
			emp_leave_reserve AS empLeaveReserve,
			emp_substitue_reserve AS empSubstitueReserve
		FROM 
			employees
		WHERE emp_id = #{empId}
	</select>
	
    <!-- 잔여일수 차감/증감 -->
    <!-- 나중에 EmployeeMapper에 옮기기 -->
    <update id="updateEmployeeReserve" parameterType="leaveApplication">
    	<if test="levAppCancel != '휴가취소'">
	    	UPDATE 
	    		employees
	   		SET
				<if test="levAppCategory == '연차' or levAppCategory == '오전반차' or levAppCategory == '오후반차'">emp_leave_reserve = emp_leave_reserve - #{levPeriod}</if>
	   			<if test="levAppCategory == '대체휴무'">emp_substitue_reserve = emp_substitue_reserve - #{levPeriod}</if>
			WHERE emp_id = #{empId}
    	</if>
    	<if test="levAppCancel == '휴가취소'">
	    	UPDATE 
	    		employees
	   		SET
				<if test="levAppCategory == '연차' or levAppCategory == '오전반차' or levAppCategory == '오후반차'">emp_leave_reserve = emp_leave_reserve + #{levPeriod}</if>
	   			<if test="levAppCategory == '대체휴무'">emp_substitue_reserve = emp_substitue_reserve + #{levPeriod}</if>
			WHERE emp_id = #{empId}
    	</if>
    </update>
    
	<!-- 휴가신청서의 결재상태를 수정 -->
    <update id="updateLeaveApplicationProcessState">
        UPDATE 
        	leave_applications
        SET 
        	lev_app_process_state = #{levAppProcessState},
        	lev_app_process_date = SYSDATE, 
        	lev_app_opinion = #{levAppOpinion, jdbcType=VARCHAR}
        WHERE 
        	lev_app_id = #{levAppId}
    </update>
	
	<!-- 미처리된 휴가 신청서를 삭제 -->
    <delete id="deleteLeaveApplication">
        DELETE FROM leave_applications
        WHERE lev_app_id = #{levAppId}
    </delete>
    
</mapper>